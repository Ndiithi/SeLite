<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<?xml-stylesheet type="text/xsl" href="https://cdn.rawgit.com/selite/selite/master/extension-sequencer/src/chrome/content/selenese_reference_to_html.xsl"?>
<!-- If you'd like to preview this reference.xml in Firefox, open it either
- online at https://cdn.rawgit.com/selite/selite/master/commands/src/chrome/content/reference.xml, or
- offline at chrome://selite-extension-sequencer/content/selenese_reference.html?chrome://selite-commands/content/reference.xml
Xml-stylesheet (whether remote or even local) didn't load up when you open this in a browser locally via file://
-->
<apidoc package-name="SeLite Commands">
<function name="typeRobust">
    <param name="target">identifier of the element to type the value for</param>
    <param name="value">value to type</param>
    <comment>This types the value in the target element, if the element exists.
        Otherwise it just passes silently.
        <br/>
        This command is a part of SeLite Commands.
    </comment>
</function>   
<function name="selectRobust">
    <param name="selectLocator">identifier of the element to select</param>
    <param name="optionLocator">value to type</param>
    <comment>This selects an option for a select list, if the select list exists.
        Otherwise it just passes silently.
        <br/>
        This command is a part of SeLite Commands.
    </comment>
</function>   
<function name="clickRobust">
    <param name="locator">identifier of the element to click at</param>
    <comment>This clicks at the element, if it exists. Otherwise it just passes silently.
        <br/>
        This command is a part of SeLite Commands.
    </comment>
</function>   
<function name="isTimestampDownToMilliseconds">
    <param name="locator">identifier of the element to parse the timestamp from</param>
    <param name="timestampInMilliseconds">Expected timestamp, in milliseconds, since Epoch (January 1, 1970 00:00:00 UTC)</param>
    <comment>Parse the given element as a timestamp and compare to the given timestamp, down to precision of milliseconds.
        <br/>Do not use auto-generated form <i>waitForTimestampDownToMilliseconds</i>.
        <br/>
        This command is a part of SeLite Commands.
    </comment>
</function>
<function name="isTimestampDownToSeconds">
    <param name="locator">identifier of the element to parse the timestamp from</param>
    <param name="timestampInMilliseconds">Expected timestamp, in <strong>milliseconds</strong>, since Epoch (January 1, 1970 00:00:00 UTC)</param>
    <comment>Parse the given element as a timestamp and compare to the given timestamp, down to precision of seconds.
        <br/>Do not use auto-generated form <i>waitForTimestampDownToSeconds</i>.
        <br/>
        This command is a part of SeLite Commands.
    </comment>
</function>
<function name="isTimestampDownToMinutes">
    <param name="locator">identifier of the element to parse the timestamp from</param>
    <param name="timestampInMilliseconds">Expected timestamp, in <strong>milliseconds</strong>, since Epoch (January 1, 1970 00:00:00 UTC)</param>
    <comment>Parse the given element as a timestamp and compare to the given timestamp, down to precision of minutes.
        <br/>Do not use auto-generated form <i>waitForTimestampDownToMinutes</i>.
        <br/>
        This command is a part of SeLite Commands.
    </comment>
</function>
<function name="isTimestampDownToPrecision">
    <param name="locator">identifier of the element to parse the timestamp from</param>
    <param name="timestampDetails">Anonymous object in form {
        <dl>
            <dt>timestamp</dt>
            <dd>Expected timestamp, in <strong>milliseconds</strong>, since Epoch (January 1, 1970 00:00:00 UTC)</dd>
            <dt>precision</dt>
            <dd>Smallest displayed time unit, in milliseconds</dd>
            <dt>validatePrecision</dt>
            <dd>Whether to validate the precision; optional. If true, this command performs a partial validation that the smallest displayed unit is not smaller than given <code>precision</code>. This validation can't eliminate 100% of such statements, since it depends on the data being displayed. If the timestamp displays down to seconds and the precision is 1 minute, but the displayed value happens to be a whole minute, this won't report the inconsistency.<br/>E.g. the timestamp parsed from <code>locator</code> element is <i>Jan 1, 2014 15:00:01 UTC</i>. If <code>precision</code> is more than a thousand (i.e. more than a second), the validation would fail - since the displayed timestamp precision is in seconds. However, if the actual displayed timestamp is in multiplies of <code>precision</code>, then the validation can't be determined. E.g. timestamp <i>Jan 1, 2014 15:00:00 UTC</i> would conform to <code>precision</code> of 60,000 (i.e. a minute). That's because validation is based on the actual displayed value, not on its format.<!-- @TODO Consider checking the format - but then Selenium.prototype.isTimestampDownToPrecision() couldn't just use Date.parse(). It would also have to check the format. -->
            </dd>
            <!--<dt>timezone</dt>
            <dd>To be defined once Firefox supports time zone names</dd>-->
        </dl>
        }. You can pass it via =&lt;&gt;...&lt;&gt; notation as per http://selite.github.io/EnhancedSelenese.
    </param>
    <comment>Parse the given element as a timestamp <!--(at the given timezone, if any)-->
        and compare to the given timestamp, down to given precision.
        <br/>Do not use auto-generated form <i>waitForTimestampDownToPrecision</i>.
        <br/>
        This command is a part of SeLite Commands.
    </comment>
</function>
<function name="sleepUntilTimestampDistinctDownToMilliseconds">
    <param name="timestampName">Label/name, usually reflecting an element or field, for which you want to get a distinct timestamp.</param>
    <param name="precision">Precision, in milliseconds; 1 by default.</param>
    <comment>Just like <code>sleepUntilTimestampDistinctDownToSeconds</code>, but guaranteed timestamp separation is the given number of milliseconds.
        <br/>
        This command is a part of SeLite Commands.
    </comment>
</function>
<function name="sleepUntilTimestampDistinctDownToSeconds">
    <param name="timestampName">Label/name, usually reflecting an element or field, for which you want to get a distinct timestamp.</param>
    <param name="precision">Precision, in seconds; 1 by default.</param>
    <comment>
       Use to record the moment when you inserted/updated such a field, and you want this timestamp to differ from
       <ol>
           <li>any previous timestamps with this label, and/or</li>
           <li>any future timestamps with this label</li>
       </ol>
       when comparing using given precision (in seconds).
       This makes sure that you get timestamps which can be compared as distinct.
       So it guarantees that timestamps with same label will have time distance between them at equal or greater than given precision.
        <br/>
        This command is a part of SeLite Commands.
    </comment>
</function>
<function name="sleepUntilTimestampDistinctDownToMinutes">
    <param name="timestampName">Label/name, usually reflecting an  element or field, for which you want to get a distinct timestamp.</param>
    <param name="precision">Precision, in minutes; 1 by default.</param>
    <comment>Just like <code>sleepUntilTimestampDistinctDownToSeconds</code>, but the guaranteed timestamp separation is 1 minute.
      <br/><br/>
      Warning: This keeps a count only of timestamps notes since you started Selenium IDE. If you re-started it soon
      after the previous run which could record timestamps, make sure you wait for a sufficient period to get distinct new timestamps.
      (That shouldn't be a problem with <code>sleepUntilTimestampDistinctDownToSeconds</code> and <code>sleepUntilTimestampDistinctDownToMilliseconds</code>).
        <br/>
        This command is a part of SeLite Commands.
    </comment>
</function>
<function name="indexBy">
    <param name="columnOrDetails">What to index by. Either <ul>
            <li>string - name of the column to index by</li>
            <li>object
                {<dl>
                    <dt>indexBy</dt>
                    <dd>string, name of the field to index by; required. Values of this field should be unique within the source, unless you also use <code>valuesUnique: false</code>. See <code>valuesUnique</code>.
                    </dd>
                    <dt>valuesUnique</dt>
                    <dd>boolean, optional, defaults to false. It indicates whether the values of the index field (determined by <code>indexBy</code>) are unique. If <code>valuesUnique</code> is false and the value of the index field are not  unique, then the result will contain less records than the source (only the last iterated record for any index value will be present in the result). If <code>valuesUnique</code> is false, then the result will contain arrays, one array per each index value, and each array will contain record(s) for its respective index value.
                    </dd>
                    <dt>store</dt>
                    <dd>string, name of the result stored variable; optional</dd>
                </dl>
                }. You can pass it via =&lt;&gt;...&lt;&gt; notation as per http://selite.github.io/EnhancedSelenese.
            </li>
        </ul>
    </param>
    <param name="sourceVariableName">Name of the stored variable which contains the source data to be indexed.
        If <code>columnOrDetails</code> is not an object, or if <code>columnOrDetails.target</code>
        is not set, then the result will replace the source (<code>storedVars[sourceVariableName]</code>).
    </param>
    <comment>Index data.
        <br/>
        This command is a part of SeLite Commands.
    </comment>
</function>   
<function name="clickRandom">
    <param name="radiosXPath">XPath expression to locate the radio buttons (it can't be any other Selenium locator). Don't include leading 'xpath='. You probably want to use XPath 'contains' function, e.g. <code>//input[ @type='radio' and contains(@id, 'feedback-') ]</code>.
    </param>
    <param name="store">Optional; name of the stored variable to store the selected value, it may include field or sub(sub...)field e.g. <code>variableName.fieldName, variableName.fieldName.subfieldName</code>...
    </param>
    <comment>This clicks at a random radio button from within a set of radio button(s) identified by locator.
        <br/>
        This command is a part of SeLite Commands.
    </comment>
</function>   
<function name="selectRandom">
    <param name="selectLocator">Locator of <code>&amp;lt;select&amp;gt;...&amp;lt;/select&amp;gt;</code> to select an option for.</param>
    <param name="paramsOrStore">optional, either
        <ul>
            <li>a string which is the name of the stored variable to put the selected value in (see <code>store</code> below), or</li>
            <li>an object in form {
                <ul>
                    <li>excludeFirst: true - Whether to exclude the first option, optional</li>
                    <li>excludeLast: true - Whether to exclude the last option, optional</li>
                    <li>store: string  - name of the stored variable to store the selected value, it may include field or sub(sub...)field e.g. <code>variableName.fieldName, variableName.fieldName.subfieldName</code>...</li>
                </ul>}. You can pass it via =&lt;&gt;...&lt;&gt; notation as per http://selite.github.io/EnhancedSelenese.
            </li>
        </ul>
    </param>
    <comment>This selects a random option from within <code>&amp;lt;select&amp;gt;...&amp;lt;/select&amp;gt;</code> identified by the locator.
        <br/>
        This command is a part of SeLite Commands.
    </comment>
</function>
<function name="typeRandom">
    <comment>Type random characters into an input. It always types at least 1 character.
        <br/>
        This command is a part of SeLite Commands.
    </comment>
    <param name="locator">Locator of the text input</param>
    <param name="paramsOrStore">optional, either
        <ul>
            <li>string - name of the stored variable to save the value to (see <code>store</code> below), or</li>
            <li>an object in form {
                <dl>
                    <dt>minLength</dt>
                    <dd>int, if present then it must be at least 1, otherwise it's set to 1.
                        If type==='email', then minLength must be at least 7 (e.g. a@hi.it), otherwise it's set to 7. If type==='password' and minLength is not set, then it defaults to 9.
                    </dd>
                    <dt>maxLength</dt>
                    <dd>int, if present then it must be at least minLength;
                        if not present, then input's 'maxlength' property is used; if that's not present, then 255
                    </dd>
                    <dt>type</dt>
                    <dd>string indicating type of the field (and what it can/should accept/refuse). Possible values:
                        <dl>
                            <dt>'email'</dt><dd>when generating an email address</dd>
                            <dt>'name'</dt><dd>when generating a human name (and some random letters A-Za-z)</dd>
                            <dt>'word'</dt><dd>word (random letters a-z)</dd>
                            <dt>'number'</dt><dd>generates a non-negative number; see more options below</dd>
                            <dt>'text'</dt><dd>generates random word(s) (and random letter-based text)</dd>
                            <dt>'html'</dt><dd>like 'text', but it adds some simple HTML tags around some of the words. 'maxlength' applies to the length of the result HTML (including the tags).</dd>
                            <dt>'password'</dt><dd>Password that contains at least one of a-z, A-Z, 0-9 and '!@#$%^&amp;*()-_'</dd>
                            <dt>'ugly'</dt><dd>This generates bad characters (possibly used for SQL injection, filesystem access).
                                It will try to include all unique ugly characters at least once, so it may always generate more
                                characters than minLength, therefore leaving some combinations untested.
                                (Indeed, it will never overstep maxLength or input's 'maxlength' property, if maxLength isn't set.)
                            </dd>
                        </dl>
                        If type is not set and if you don't use <code>characters</code>, then the default characters used are: alphanumerics, space, underscore, dash -
                    </dd>
                    <dt>characters</dt>
                    <dd>String or array containing acceptable characters, or a regular expression that matches any acceptable characters. You can't use both <code>type</code> and <code>characters</code> with the same action call.</dd>
                    <dt>htmlTags</dt><dd>Array of HTML tag names to use if type is 'html'. Optional. It's useful with applications/WYSIWYG editors that transform HTML (e.g. Xinha editor transforms &amp;lt;b&amp;gt; to &amp;lt;strong&amp;gt;, &amp;lt;i&amp;gt; to &amp;lt;em&amp;gt; and &amp;lt;strike&amp;gt; to &amp;lt;del&amp;gt;).</dd>
                    <dt>decimal</dt>
                    <dd>boolean, optional. If true, then generate a decimal number. Any minLength/maxLength
                       (or HTML maxlength property of the input)
                      will apply to number of letters used, i.e. to number of generated digits + 1 (for the decimal point)
                    </dd>
                    <dt>scale</dt>
                    <dd>int If set, max length of the decimal fraction (max. number of digits right of decimal point).
                        It has to be higher than 0; if you pass scale: 0, it will be ignored.
                    </dd>
                    <dt>max</dt>
                    <dd>number (int or float) maximum value (inclusive, if 'scale' permits). Optional. Applied when type='number'.
                       It has to be higher than zero; zero will be ignored. If used, then 'minLength', 'maxLength' (or 'maxlength' property)
                         will be ignored. Indeed, if decimal is set and the result is smaller than max, then it may have more decimal places than max has.
                    </dd>
                    <dt>min</dt>
                    <dd>number (int or float) minimum value (inclusive). Optional, but it may be only used if 'max' is set. See 'max'.
                    </dd>
                    <dt>store</dt>
                    <dd>string name of the stored variable to store the selected value, it may include field or sub(sub...)field e.g. <code>variableName.fieldName, variableName.fieldName.subfieldName</code>...
                    </dd>
                    <dt>table</dt>
                    <dd>If set, it must be an SeLiteData.Table instance. Then this narrows down the value by current narrowBy config in SeLite Settings (if set). It uses that narrowBy regardless of any length and type restrictions of the field passed through <code>paramsOrStore</code>! Only set <code>table</code> for a field that should be narrowed.
                </dl>
                }. You can pass it via =&lt;&gt;...&lt;&gt; notation as per http://selite.github.io/EnhancedSelenese.
            </li>
        </ul>
    </param>
</function>
<function name="typeRandomEmail">
    <param name="locator">Locator of the text input where to type the generated email address</param>
    <param name="params">optional, either
        <ul>
            <li>string - name (first or last or full) to base the email on, or</li>
            <li>object in form {
                <dl>
                    <dt>from</dt>
                    <dd>string locator of an element which has a name (as described above) in it; optional, you can use parameter field 'name' instead</dd>
                    <dt>name</dt>
                    <dd>string value of the name (as described above), optional; used only if 'from' is not present</dd>
                    <dt>store</dt>
                    <dd>name of the stored variable to save the value to, it may include field or sub(sub...)field e.g. <code>variableName.fieldName, variableName.fieldName.subfieldName</code>...</dd>
                    <dt>minLength</dt>
                    <dd>int as described for typeRandom action (i.e. doTypeRandom function), optional</dd>
                    <dt>maxLength</dt>
                    <dd>int as described for typeRandom action (i.e. doTypeRandom function), optional</dd>
                </dl>
               }. You can pass it via =&lt;&gt;...&lt;&gt; notation as per http://selite.github.io/EnhancedSelenese.
            </li>
        </ul>
    </param>
    <comment>Type random email address, based on a name already typed in another element. If you don't want the email address to be based on any name, then use <i>typeRandom</i> with <i>type='email' instead.</i>
        <br/>
        This command is a part of SeLite Commands.
    </comment>
</function>
<function name="selectMapped">
    <comment>TODO implement + comment
        <br/>
        This command is a part of SeLite Commands.
    </comment>
</function>
<function name="disableJavascript">
    <comment>Disable Javascript for the web application that is being tested
        <br/>
        This command is a part of SeLite Commands.
    </comment>
</function>
<function name="enableJavascript">
    <comment>Disable Javascript for the web application that is being tested
        <br/>
        This command is a part of SeLite Commands.
    </comment>
</function>
<function name="selectTopFrameAnd">
    <param name="locatorOrLocators">Either
        <ul>
            <li>string - a locator, or</li>
            <li>array of locators, passed as `[ 'locator1', 'locator2'... ]` where each locator is an escaped Javascript string. You can use string expressions, not just string literals.</li>
        </ul>
        It's optional. If nothing is passed, then the command just selects the top frame.
    </param>
    <comment>
        It selects the top frame. Then it waits for any specified frames to become present. However, it doesn't wait for the top frame. For that you should use 'andWait' postifx for the last command that loaded the current page. Don't use <b>selectTopFrameAndAndWait</b>.
        <br/>
        This command is a part of SeLite Commands.
    </comment>
</function>
<function name="ensureUnderWebRoot">
    <param name="forceReload">Whether to reload the webroot, even when the current URL is under webroot. Boolean, optional, false by default.
    </param>
    <comment>
        It ensures that the location of the current window will be under <i>webroot</i> (defined in webRoot config field - see http://selite.github.io/Settings). If it is not so, or if you pass forceReload equal to true, then it opens <i>webRoot</i> in the current window.
        <br/>
        This command is a part of SeLite Commands.
    </comment>
</function>
<function name="nop">
    <comment>This does nothing. It serves when all you need is to evaluate Target and/or Value parameter, e.g. <code>javascript{...}</code> (see http://docs.seleniumhq.org/docs/02_selenium_ide.jsp#javascript-usage-with-non-script-parameters).</comment>
</function>
<function name="log">
    <param name="message">Message to log.
    </param>
    <param name="level">One of: debug, info, warn, error. Defaults to error (so that it's visible no matter what filter).
    </param>
    <comment>
        It logs the message to Selenium IDE log tab.
        <br/>
        This command is a part of SeLite Commands.
    </comment>
</function>
<function name="getAttribute">
    <param name="attributeLocator">
        Atribute locator: element locator, followed by @ and an attribute name. In addition to traditional <code>getAttribute</code>, this supports <code>@innerText</code> and <code>@value</code>. For example <code>id=age@value</code>.
        <br/>This extension also applies to <code>selenium.browserbot.findAttribute().</code>
    </param>
    <comment>
        Set an attribute on an element to a given value.
        <br/>
        This command is a part of SeLite Commands.
    </comment>
</function>
<function name="setAttribute">
    <param name="attributeLocator">Atribute locator, as per <code>getAttribute</code>: element locator, followed by @ and an attribute name. For example <code>id=link@href</code>.
    </param>
    <param name="value">Value to set.
    </param>
    <comment>
        Set an attribute on an element to a given value.
        <br/>
        This command is a part of SeLite Commands.
    </comment>
</function>
<function name="assertTrue">
    <param name="expression">Javascript expression to evaluate.
    </param>
    <comment>
        Assert the given <code>expression</code> to be <code>true</code> (compared strictly).
        <br/>
        This command is a part of SeLite Commands.
    </comment>
</function>
<function name="verifyTrue">
    <param name="expression">Javascript expression to evaluate.
    </param>
    <comment>
        Verify the given <code>expression</code> to be <code>true</code> (compared strictly).
        <br/>
        This command is a part of SeLite Commands.
    </comment>
</function>
</apidoc>
